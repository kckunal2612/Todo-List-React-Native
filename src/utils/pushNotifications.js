import PushNotificationIOS from '@react-native-community/push-notification-ios';
import {hasDateAlreadyExpired} from './dateTime';
const DESCRIPTION_CHAR_LIMIT = 20;

var PushNotification = require('react-native-push-notification');

const MAX_NOTIFICATION_ID_VALUE = 10000;

export const setupPushNotifications = () => {
  PushNotification.configure({
    // (optional) Called when Token is generated (iOS and Android)
    onRegister: function (token) {
      console.log('TOKEN:', token);
    },

    // (required) Called when a remote is received or opened, or local notification is opened
    onNotification: function (notification) {
      console.log('NOTIFICATION:', notification);

      // process the notification

      // (required) Called when a remote is received or opened, or local notification is opened
      notification.finish(PushNotificationIOS.FetchResult.NoData);
    },

    // IOS ONLY (optional): default: all - Permissions to register.
    permissions: {
      alert: true,
      badge: true,
      sound: true,
    },

    // Should the initial notification be popped automatically
    // default: true
    popInitialNotification: true,

    /**
     * (optional) default: true
     * - Specified if permissions (ios) and token (android and ios) will requested or not,
     * - if not, you must call PushNotificationsHandler.requestPermissions() later
     * - if you are not using remote notification or do not have Firebase installed, use this:
     *     requestPermissions: Platform.OS === 'ios'
     */
    requestPermissions: true,
  });
};

/**
 * Clear all local notifications from system
 */
export const clearReminders = () => {
  PushNotification.cancelAllLocalNotifications();
};

/**
 * Schedule Local Push Notification for TODO with a reminder time
 * @param {*} title
 * @param {*} description
 * @param {*} remindDate
 */
export const scheduleReminder = (title, description, remindDate) => {
  try {
    const reminderDate = remindDate.toDate();
    // only do this for reminders that have NOT expired
    if (!hasDateAlreadyExpired(reminderDate)) {
      const pushNotificationId = Math.floor(
        Math.random() * Math.floor(MAX_NOTIFICATION_ID_VALUE),
      );
      const pushDescription =
        description.length > DESCRIPTION_CHAR_LIMIT
          ? description.substring(0, DESCRIPTION_CHAR_LIMIT)
          : description;

      PushNotification.localNotificationSchedule({
        /* Android Only Properties */
        id: pushNotificationId, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
        largeIcon: 'ic_notification', // (optional) default: "ic_launcher"
        smallIcon: 'ic_notification', // (optional) default: "ic_notification" with fallback for "ic_launcher"

        /* iOS only properties */
        alertAction: 'view', // (optional) default: view
        category: '', // (optional) default: empty string
        userInfo: {}, // (optional) default: {} (using null throws a JSON value '<null>' error)

        /* iOS and Android properties */
        title: title, // (optional)
        message: pushDescription, // (required)
        date: reminderDate,
      });
    }
  } catch (error) {}
};
